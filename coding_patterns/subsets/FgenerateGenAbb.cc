#include <bits/stdc++.h>

using namespace std;
using namespace std::chrono;

vector<string> generateGenAbb(const string &str) {
    vector<string> result;

    struct AbbStr {
        string str;
        int count;
        int len;

        AbbStr(string str, int count, int len) : str(std::move(str)), count(count), len(len) {};
    };
    queue<AbbStr> queue;
    queue.emplace("", 0, 0);

    while (!queue.empty()) {
        AbbStr tmp = queue.front();
        queue.pop();

        if (tmp.len == str.size()) {
            if (tmp.count)
                tmp.str += to_string(tmp.count);

            result.emplace_back(tmp.str);
        } else {
            queue.emplace(tmp.str, tmp.count + 1, tmp.len + 1);

            if (tmp.count)
                tmp.str += to_string(tmp.count);
            tmp.str += str[tmp.len];
            queue.emplace(tmp.str, 0, tmp.len + 1);
        }
    }

    return result;
}

/*
 * Given a word, write a function to generate all of its unique generalized abbreviations.
 * Generalized abbreviation of a word can be generated by replacing
 * each substring of the word by the count of characters in the substring.
 * Take the example of “ab” which has four substrings: “”, “a”, “b”, and “ab”.
 * After replacing these substrings in the actual word by the count of characters
 * we get all the generalized abbreviations: “ab”, “1b”, “a1”, and “2”
 */
int main() {
    auto start = high_resolution_clock::now();

    auto result = generateGenAbb("internationalization");
    for (auto &x: result)
        cout << x << endl;

    auto stop = high_resolution_clock::now();
    cout << duration_cast<seconds>(stop - start).count() << endl;
}